# -*- coding: utf-8 -*-
"""pratica_kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oR5exo5cFYRafMxRkfesv7fGL0oiU4mY
"""

import pandas as pd
import numpy as np
import plotly.express as px #Criação de gráficos dinamicos
import plotly.graph_objects as go #Concatenização de Dados
from sklearn.preprocessing import StandardScaler # Padronização de Dados
from sklearn.cluster  import KMeans

#Abrindo  o Arquivo de Dados
base_iris = pd.read_csv('base_iris.csv', sep = ";")

base_iris.head()

base_iris.shape

#Verificando a Base das flores
 base_iris['Class'].unique()

"""# Realizando um agrupamento de pétalas"""

# criando Variável X com as colunas petal lenght e petal width 
X_petala = base_iris.iloc[:,[2,3]].values
X_petala[:10]

"""# Normalização dos dados"""

normalizar_dados = StandardScaler()
X_petala = normalizar_dados.fit_transform(X_petala)
X_petala[:10]

"""# Calculando o numero de Clusters"""

wcss_petala = []#criando uma Lista Vazia
for i in range(1,11):
  kmeans_petala = KMeans(n_clusters=i, random_state=0) #executa o kmeans para todos os clusters e random_state = 0 para fixar e obter os mesmos resultados
  kmeans_petala.fit(X_petala) #Realizando o Treinamento
  wcss_petala.append(kmeans_petala.inertia_) #Adiciona na lista os valores do WCSS

#vizualizando os valores de WCSS
for i in range(len(wcss_petala)):
  print('Cluster:',i, ' - valor do wcss:', wcss_petala[i])

"""# Criando Gráficos Para Vizualizar Melhor"""

grafico_cotovelo_petala = px.line(x= range(1,11), y= wcss_petala)
grafico_cotovelo_petala.show()

kmeans_petala = KMeans(n_clusters=3, random_state=0)
label_cluster_petala = kmeans_petala.fit_predict(X_petala)

#verificando a classificação dos Clusters
label_cluster_petala

centroides_petala = kmeans_petala.cluster_centers_
centroides_petala

"""# Gráfico de Agrupamento  Das Caracteristicas  do tamanho e comprimento das Pétalas"""

grafico_petala = px.scatter(x = X_petala[:,0], y = X_petala[:,1], color= label_cluster_petala)
grafico_centroide_petala = px.scatter(x = centroides_petala[:,0], y = centroides_petala[:,1], size=[7,7,7])
grafico_final_petala = go.Figure(data = grafico_petala.data + grafico_centroide_petala.data)
grafico_final_petala.show()

"""# Realizando o Agrupamento com dados da Sépala """

# realizando o agrupamento da  sepala
X_sepala = base_iris.iloc[:,[0,1]].values
X_sepala[:10]

#calcular o WCSS
wcss_sepala = []
for i in range(1,11):
  kmeans_sepala = KMeans(n_clusters=i,random_state= 0 )# executar o kmeans em 10 clusters e fixar os resultados
  kmeans_sepala.fit(X_sepala) #treinamento
  wcss_sepala.append(kmeans_sepala.inertia_)

for i in range(len(wcss_sepala)):
  print('Cluster: ', i, 'valor do wcss: ', wcss_sepala[i])

# grafico cotovelo
grafico_cotovelo_sepala = px.line(x= range(1,11), y = wcss_sepala)
grafico_cotovelo_sepala.show()

"""#Executando o K-means """

kmeans_sepala = KMeans(n_clusters=3, random_state=0)
label_cluster_sepala = kmeans_sepala.fit_predict(X_sepala)

label_cluster_sepala

centroides_sepala = kmeans_sepala.cluster_centers_
centroides_sepala

"""#Grafico de agrupamento e caracteristica do tamanho das sepalas """

grafico_sepala = px.scatter(x = X_sepala[:,0], y = X_sepala[:,1], color= label_cluster_sepala)
grafico_centroide_sepala = px.scatter(x = centroides_sepala[:,0], y = centroides_sepala[:,1], size=[7,7,7])
grafico_final_sepala = go.Figure(data= grafico_sepala.data + grafico_centroide_sepala.data)
grafico_final_sepala.show()